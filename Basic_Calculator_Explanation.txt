
Here's the complete Explanation of the java code of basic calculator.

Created By Aman Tyagi……………
```java
import java.util.Scanner;
```
This line imports the `Scanner` class from the `java.util` package. It is necessary to use the `Scanner` class to handle user input.

```java
class InputHandler {
    private Scanner scanner;
```
This line declares a class named `InputHandler`. It has a private `Scanner` instance variable named `scanner`, which will be used to read user input.

```java
public InputHandler() {
    scanner = new Scanner(System.in);
}
```
This is the constructor of the `InputHandler` class. It initializes the `scanner` object by creating a new instance of `Scanner` that reads input from the standard input stream (`System.in`).

```java
public int getValidIntegerInput(String prompt) {
    while (true) {
        System.out.println(prompt);
        String input = scanner.nextLine();
        try {
            int value = Integer.parseInt(input);
            return value;
        } catch (NumberFormatException e) {
            System.out.println("Invalid input. Please enter a valid integer.");
        }
    }
}
```
This method `getValidIntegerInput` takes a `prompt` as a parameter and repeatedly prompts the user with the provided message until a valid integer input is entered. It uses a `while` loop with a `true` condition to keep prompting the user. It reads the user's input as a string using `scanner.nextLine()`, and then tries to convert it to an integer using `Integer.parseInt()`. If the conversion succeeds, it returns the integer value. If an exception (`NumberFormatException`) is caught, it displays an error message and repeats the loop.

```java
public int getIntegerInputInRange(String prompt, int min, int max) {
    while (true) {
        int value = getValidIntegerInput(prompt);
        if (value >= min && value <= max) {
            return value;
        } else {
            System.out.println("Invalid input. Please enter a value within the specified range.");
        }
    }
}
```
This method `getIntegerInputInRange` takes a `prompt`, `min`, and `max` as parameters and repeatedly prompts the user with the provided message until a valid integer input within the specified range is entered. It uses the `getValidIntegerInput` method to get an integer input from the user. It then checks if the value is within the range (`min` and `max`). If it is, it returns the value. Otherwise, it displays an error message and repeats the loop.

The remaining code defines the `Calculator` class and the `main` method in the `Basic_Calculator` class, which uses the `InputHandler` class to handle user input and the `Calculator` class to perform the arithmetic operations based on the user's choice. The code prompts the user for two numbers and an operation choice, performs the selected operation, and continues until the user chooses to exit.